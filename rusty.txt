FILE FORMATS
.M, .M2 - music, for PMD
.MAG - large image
.MGX - weird new graphics format
.COM - executable, usually has text n stuff
.TBL / .DAT - some kind of tileset thing?
.RGB - some kind of graphics?
.MAP - ?
.FOT - ?
.PPL - SFX?
.PPT - ?
.ANI - ?

Title screen options:

83 54 83 75 83 81 83 6a 83 85 81 7c 00 00 (bottom option, 0x1fa02)

ge    --    mu    su    ta    --    to      ( top option, 0x1fa12)
83 51 81 7c 83 80 83 58 83 5e 81 7c 83 67 00
131 81 129 124

83 52 83 93 83 65 83 42 83 6a 83 85 81 7c 00     (middle, 0x1fa21)




ge    -     mu    su    ta    to
83 51       83 80 83 5a                (SJIS codes/output)
4f 3e 4c 41 0f 2f e1 fa ff ff 42 9c 4a ff ff 43 73 4f 87 4a ff 73 ff 44 95
4a 04 a3 4c 04 df be 00 47 06 c4 13 00 b9 30 ff 00 ac c0 e8 04 aa e2 f9 ff 07 33 c0

These options are in the .HDI File at offset 0x34d424. (How should I figure out which file that's in?)


do u ya liltsu te
82 c7 82 a4 82 e2 82 c2

?     ?    ?     ?
82 a3 82 a9 82 c9 82 e0

Fullwidth 300 at 0x2ed4f0
Bits and pieces of the text... dictionary?
300 is preceded by 0x00.

0x00 and 0x01 bytes are probably important.
Explicit/reference control codes?

First story screen at 0x837f4 in memory
ko     no     (hen)
82 b1  82 cc  95 d3
??   = FF 00 54
/r/n = 00 73?

It's also at 0x5cbe60 in the full ROM.
previous 4c5a: 0x5cb7fc
end of data:     5ce16c
next 4c5a:     0x5ce7ee
So it's in a 11kb file.

Python script says it's in VISUAL.COM, at ~0x660.

It seems to have the "starts out fine, but becomes garbled quickly" quality that people say is a telltale sign of LZSS.

Entirely normal first line until the to-u to-u. e5 61 04 00 73
That ending 00 73 is probably a line break?

There's an incrementing pattern 00 54, 01 54, ...06 54 at intervals of about 0x50 (0x54, 0x4e, 0x44, 0x42, 0x54). Is it the window number or something?

Literal/pointer flag: one byte, with 8 bits signifying literal (1) or pointer (0). Literals are 1 byte each, pointers are 2 bytes each.
Read it backwards???
FF's at 8-byte intervals at the beginning, when all the text is normal.
(ef) 82 c6 82 a4 e5 61 04 00 73
     to--- u---- ^ptr? ?? <LN>?

61 e5 ptr that should somehow point to offset (0x69a)

e561 is at 69e and points to 69a, 4 bytes
c761 is at 6a4 and points to 678, 4 bytes
d160 is at 6a6 and points to 683, _3_ bytes (since it copies the 82 as well!!!)
ac61 is at 6ad and points to ? (maybe some kind of wait control code?


last 4 bits' value + 3 = length in bytes of the target thing

real_offset = tail - ((tail - 18 - raw_offset) mod 4096)
              69e  - ((69e  - 6e5) mod 4096)

val - loc = ?
6e5 - 69e = 0x47
6c7 - 6a4 = 0x23
6d1 - 6a6 = 0x2b

val              rel loc
6e5: should point 0x04 bytes before it
6c7: should point 0x2c bytes before it
6d1: should point 0x23 bytes before it




ff = 1 1 1 1 1 1 1 1
ef = 1 1 1 0 1 1 1 1
7c = 0 1 1 1 1 1 0 0
76 = 0 1 1 1 0 1 1 0
so 4 bytes of pointers, 5 bytes of literal(?), 2 bytes of pointer
(7c) c7 61 d1 60 dc 82 c5 82 e0 ac 61 
     ^ptr  ^ptr  ?  de--- mo--- ^ptr
     61c7 = (ptr) ko no          (at offset 0x678)
     60d1 = (ptr) village ma-    (at offset 0x683)

4 bit run length, 12 bit relative offset
c = 12(dec)
761 = 

(ef) 1d 05 81 45 02 71 16 05 78
     ?  ?  dot-- ^ptr  ?  ?  ?

(ff) 06 00 69 50 00 40 00 00
prolly fuckin ctrl codes

(7c) fc 63 b2 6d 86 05 15 01 54 a9 60
     ^ptr  ^ptr  ?  ?  ?  ?  ?  ?  ?

(ff) 91 e5 90 a8 8e 45 82 b3
     kanji kanji kanji chi--

(76) df 61 82 b5 f6 60 c1 82 bd b2 61
     ^ptr  shi-- ^ptr(-ma)ta--- ^ptr

Alright, so it looks like that pointer "f6 60" decodes to 82 dc 82, "ma liltsu(1/2)", which is only really possible if it can reference text that's already been decoded! So I should probably figure out what the offsets will be when it's decoded.

(ed)

the pointer [0x00 0x00] points to 30 2e a3, which is 8 before it (0x12 abs) and 3 bytes long.

the pointer [0x07 0x00] points to ca 30 2e, which is 16 before it (0x19 abs) and 3 bytes long.

the pointer [0x34 0x00] points to 2e c7 06, which is 17 before it (0x46 abs) and 3 bytes long. (x46-x34= 0x12)

the pointer [0x38 0x00] points to 30 00 00, which is 17 before it (0x4a abs) and 3 bytes long. (x4a-x38= 0x12)

the pointer [0x44 0x01] points to 30 2e c7 06, which is 15 before it (0x56 abs) and 4 bytes long. (x56-x44=18 decimal)

the pointer [0x38 0x00] points to 30 00 00, which is at 0x4a abs and 3 bytes long. (0x4a-0x38 = 0x12)
0x38 + 0x12 = 0x4a

the pointer [0x4c 0x14] points to 00 ad 05 06 00 26 a3, which is at 0x15e and 7 bytes long. (0x14c+0x12=0x15e)

the pointer [0x4a 0x30] points to c2 c1 e0, which is at 0x35c and is 3 bytes long. (0x34a+0x12=0x35c)

the pointer [0xe2 0xf9] points to 00 00 00 00 00 00 00 00 00 00 00 00, which is in an empty part of the buffer and is 12 bytes long...
So the buffer should be initialized with 00s, I guess.

the pointer [0x39 0x20] points to ab ab ab, which is at 0x24b and is 3 bytes long. (0x239+0x12= (oh cool, you can also point to stuff you're writing!)

the pointer [0x59 0x02] points to 6b 45 01 c5 05, which is at 0x106b and is 5 bytes long. (It's a 0x1000-long circular buffer, so write decompressed bytes to cursor % 0x1000)

the pointer [0xd1 0xc2] points to 00 00 00 06 07, which is... nowhere? 
0607 appears at 0x1e05 and 0x28c8 before this, and would show up in the buffer at offset 0x8c8.
The value that's getting written is 5 00's, like at 0x2ce3.

=== Control codes ===
VISUAL.COM:
040073 = <LN>
0F5F45011D05 = slow down?
0f5f seems necessary. Replacing it with spaces causes a freeze.
4501 has no discernable difference when removed...?
1d05 also has no discernible function.
7705 appears to be a graphical thing?

6b4501 shows up a lot... Really, 6x4501 shows up a lot.

VS1_00.MAG = graveyard background
VS1_01.MAG = group of four people
VS1_02.MAG = old guy
VS1_03.MAG = kids
VS1_04.MAG = dominatrix

Stuff that might happen with control codes:
Highlighting different portraits
Changing text color
Line breaks
Scrolling to the next line
Overwriting previous text???
Clearing the screen
Going back to the top line

=== Weird Font Stuff ===
There's totally half-width letter stuff in there. Just gotta look for it.
I see an a, I see a g.
a = 00?
g = 06?

There is indeed FONT.DAT, but it's for the UI that's already in English at the bottom of the screen. Flames, clocks, card suits, etc...
It does get used for the BGM song titles, which are encoded in plain ascii (somewhere). It's all caps and 16x16 with shadow information too.
You can look at it in YY-CHR with the format 1BPP (16x16).
Try some other .DAT files too??
 
VISUAL.COM ignores ascii characters, putting spaces instead.

=== MGX images ===
I'm pretty sure the opening cinematic is not text at all, but MGX graphics. Same for the ending credits, but they're English already.

The MGX header begins with MAKI02A.
MAG/MAX -> MAKI02... (Rusty MAGs begin with "MAKI02  MPS  RUSTY".)
MKI -> MAKI01A or MAKI01B.
So I'd need to learn about the MAG and MKI families of compression. MGX is probably similar.

R_A11.MGX = first image, castle
R_A21.MGX = hall of shadowy figures
R_A23.MGX = first text?
R_A24.MGX = red haired lady
Renamed R_A23.MGX to R_A21.MGX. Shows the first text on top of the mountain.
Renamed R_A24.MGX to R_A21.MGX. Shows the red haired lady on top of the mountain.

Nope, can't get it to load .MAG files in the intro just by putting MAG filenames in. Sad...

R_A23.MGX
Deleted last 4 6's: no discernible effect
Deleted the last 10% or so: It's like I took an eraser to the last row: a lot gone, but lots of scattered pixels remaining. Hm.

The image is probably 640 (0x280) wide, and like 276/2 tall (0x8a)

Magv2-like header?
No metadata or anything, just 1a
start of header is 0x09

00 - start of header
00 - computer model code (means PC-98)
00 - model-dependent flags (16 colors, analog, 400+ rows, PC-98)
00 - screen mode (irrelevant?
13 00 - x coord for left edge (=19) (gets padded to a multiple of 4 bytes)
80 00 - y coord for top edge (=128)
74 02 - x coord for right edge (=628)
0f 01 - y coord for bottom edge (=271) - this value is a little suspect
50 00 00 00 - offset from start of header to 'flag A' buffer    (0x59)
ba 05 00 00 - offset from start of header to 'flag B' buffer    (0x5c3)
fc 08 00 00 - size of 'flag B' section, in bytes                (0x8fc)
b6 0e 00 00 - offset from start of header to color index stream (0xebf)
d0 09 00 00 - size of pixel color section, in bytes             (0x9d0)
